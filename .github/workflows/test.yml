name: Test Portfolio

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  html-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install html-validate
      run: npm install -g html-validate
      
    - name: Validate HTML files
      run: |
        html-validate index.html about.html contact.html portfolio.html 404.html 500.html case-studies/hanaihang.html
        
    - name: Check HTML structure
      run: |
        echo "Checking HTML structure..."
        for file in *.html case-studies/*.html; do
          echo "Validating $file"
          if ! grep -q "<!DOCTYPE html>" "$file"; then
            echo "Missing DOCTYPE in $file"
            exit 1
          fi
          if ! grep -q "<html" "$file"; then
            echo "Missing html tag in $file"
            exit 1
          fi
          if ! grep -q "</html>" "$file"; then
            echo "Missing closing html tag in $file"
            exit 1
          fi
        done

  css-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install css-validator
      run: npm install -g css-validator
      
    - name: Validate CSS (filtered)
      run: |
        echo "Running CSS validation with filtered output..."
        node css-validate-filtered.js --files "style.css,about.css,contact.css,case-studies/case-study.css"
        
    - name: Check CSS syntax
      run: |
        echo "Checking CSS syntax..."
        for file in *.css case-studies/*.css; do
          echo "Validating $file"
          # Check if file exists and has content
          if [ -f "$file" ] && [ -s "$file" ]; then
            echo "✅ $file exists and has content"
          else
            echo "❌ $file is missing or empty"
            exit 1
          fi
        done

  json-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate JSON files
      run: |
        echo "Validating JSON files..."
        python3 -m json.tool projects.json > /dev/null
        python3 -m json.tool services.json > /dev/null
        echo "JSON files are valid"
        
    - name: Check JSON structure
      run: |
        echo "Checking JSON structure..."
        python3 -c "
        import json
        with open('projects.json') as f:
            projects = json.load(f)
        assert isinstance(projects, list), 'Projects should be a list'
        for project in projects:
            assert 'id' in project, 'Project missing id'
            assert 'title' in project, 'Project missing title'
            assert 'year' in project, 'Project missing year'
        print('Projects JSON structure is valid')
        "
        
        python3 -c "
        import json
        with open('services.json') as f:
            services = json.load(f)
        assert 'services' in services, 'Services missing services key'
        assert 'skills' in services, 'Services missing skills key'
        assert 'certifications' in services, 'Services missing certifications key'
        print('Services JSON structure is valid')
        "

  performance-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install @lhci/cli
      run: npm install -g @lhci/cli
      
    - name: Run Lighthouse CI (CI config)
      run: |
        npx @lhci/cli autorun \
          --config=.lighthouseci/config.ci.json \
          --collect.url=http://localhost:8000 \
          --collect.numberOfRuns=3
        
    - name: Check file sizes
      run: |
        echo "Checking file sizes..."
        find . -name "*.html" -exec wc -c {} \; | awk '$1 > 100000 {print "Large HTML file:", $2, "bytes"; exit 1}'
        find . -name "*.css" -exec wc -c {} \; | awk '$1 > 50000 {print "Large CSS file:", $2, "bytes"; exit 1}'
        find . -name "*.js" -exec wc -c {} \; | awk '$1 > 50000 {print "Large JS file:", $2, "bytes"; exit 1}'
        echo "All file sizes are acceptable"

  lighthouse-production:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install @lhci/cli
      run: npm install -g @lhci/cli
      
    - name: Run Lighthouse on production (strict)
      run: |
        npx @lhci/cli autorun \
          --collect.url=https://earthondev.github.io/Portfolio/ \
          --config=.lighthouseci/config.prod.json

  accessibility-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    # ติดตั้งแบบ local (ไม่ใช้ -g) และติดตั้ง puppeteer ด้วย
    - name: Install pa11y (local) + puppeteer
      run: |
        npm install --no-save pa11y puppeteer

    - name: Start local server
      run: |
        python3 -m http.server 8000 &
        sleep 5

    - name: Run accessibility tests (no-sandbox)
      run: node pa11y-fixed.js
        
    - name: Check image alt attributes
      run: |
        echo "Checking image alt attributes..."
        for f in *.html case-studies/*.html; do
          if grep -q "<img " "$f"; then
            if ! grep -qE "<img [^>]*alt=" "$f"; then
              echo "Missing alt on some <img> in $f"; exit 1
            fi
          fi
        done
        echo "All images have alt attributes"

  security-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check security headers
      run: |
        echo "Checking security configuration..."
        if [ -f ".htaccess" ]; then
          echo "Apache security headers configured"
        fi
        if [ -f "netlify.toml" ]; then
          echo "Netlify security headers configured"
        fi
        
    - name: Check for sensitive data
      run: |
        echo "Checking for sensitive data..."
        if grep -RInE "(api[_-]?key|secret|password|token)\s*[:=]\s*['\"][^'\"]+['\"]" . \
          --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=.lighthouseci \
          --exclude="package-lock.json" --exclude="*.min.*"; then
          echo "Potential sensitive data found"; exit 1
        fi
        echo "No sensitive data found"
